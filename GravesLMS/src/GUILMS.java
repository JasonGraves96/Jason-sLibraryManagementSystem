// Jason Graves
// Software Development I
// Professor Walauskis
// 3/24/2024
// This is the new main class


import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.JComboBox;

import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JFormattedTextField;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import java.awt.Color;
import java.awt.SystemColor;


// Most of the structure of this class was autogenerated from the Design tab in Eclipse
public class GUILMS {

	private JFrame frame;
	private JTextField txtBookTtileOr;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {//all the main method does is create the window.
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUILMS window = new GUILMS();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public GUILMS() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {//the next bunch of lines are visuals for the UI
		frame = new JFrame();
		frame.getContentPane().setBackground(Color.ORANGE);
		frame.getContentPane().setForeground(Color.ORANGE);
		frame.setResizable(false);
		frame.setBounds(100, 100, 824, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JButton btnNewButton = new JButton("Add Book");
		btnNewButton.setForeground(Color.BLACK);
		btnNewButton.setBackground(Color.PINK);
		btnNewButton.setFont(new Font("Tahoma", Font.PLAIN, 26));
		btnNewButton.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {//ActionEvents are how different methods are triggered, this is the add book button
				String title = txtBookTtileOr.getText();//gets the user's text from the text box
				if(!title.isEmpty()) {//checks to see that it's not empty
					addBook(title);//runs the method below which adds the book to the database
				}else {
					JOptionPane.showMessageDialog(null, "You didn't put in a title.");//if there's nothing in the text box
				}
				
			}
		});
		
		//visual stuff for the add person button
		btnNewButton.setBounds(10, 384, 150, 81);
		frame.getContentPane().add(btnNewButton);
		
		JButton btnNewButton_1 = new JButton("Add Person");
		btnNewButton_1.setForeground(Color.WHITE);
		btnNewButton_1.setBackground(Color.BLACK);
		btnNewButton_1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {//add person button is pressed
				String name = txtBookTtileOr.getText();//gets the input from the textbox
				if(!name.isEmpty()) {//makes sure there's something in the box
					addPerson(name);//runs the method below to add a person to the database
				}else {
					JOptionPane.showMessageDialog(null, "You didn't put in a name.");//if there is no name
				}
				
			}
		});
		
		//visual stuff for the text box
		btnNewButton_1.setFont(new Font("Tahoma", Font.PLAIN, 22));
		btnNewButton_1.setBounds(170, 384, 150, 81);
		frame.getContentPane().add(btnNewButton_1);
		txtBookTtileOr = new JTextField();
		txtBookTtileOr.setText("Book Ttile or Person Name here");
		txtBookTtileOr.setFont(new Font("Tahoma", Font.PLAIN, 20));
		txtBookTtileOr.setBounds(10, 331, 790, 43);
		frame.getContentPane().add(txtBookTtileOr);
		txtBookTtileOr.setColumns(10);
		
		//visual stuff for the remove book button
		JButton btnNewButton_1_1_1_1 = new JButton("Remove Book");
		btnNewButton_1_1_1_1.setBackground(Color.RED);
		btnNewButton_1_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {//when the remove book button is pressed
				String title = txtBookTtileOr.getText();//gets the input from the text box
				removeBook(title);//runs the method to remove the book
			}
		});
		
		//visual stuff for the remove person button
		btnNewButton_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 18));
		btnNewButton_1_1_1_1.setBounds(10, 475, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_1);
		JButton btnNewButton_1_1_1_1_1 = new JButton("Remove Person");
		btnNewButton_1_1_1_1_1.setBackground(Color.WHITE);
		btnNewButton_1_1_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {//when the remove person button is pressed
				String name = txtBookTtileOr.getText();//gets the user input from the textbox
				removePerson(name);//runs the method to remove the person
			}
		});
		
		//visual stuff for the check out book button
		btnNewButton_1_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 17));
		btnNewButton_1_1_1_1_1.setBounds(170, 476, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_1_1);
		JButton btnNewButton_1_1_1_1_1_1 = new JButton("Check out Book");
		btnNewButton_1_1_1_1_1_1.setBackground(Color.GREEN);
		btnNewButton_1_1_1_1_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {//when the check out book button is pressed
				String title = txtBookTtileOr.getText();//gets the user input from the textbox
				 checkOutBook(title);//runs the method to check out a book
			}
		});
		
		//visual stuff for the check in book button
		btnNewButton_1_1_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 17));
		btnNewButton_1_1_1_1_1_1.setBounds(330, 476, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_1_1_1);
		JButton btnNewButton_1_1_1_1_1_1_1 = new JButton("Check in Book");
		btnNewButton_1_1_1_1_1_1_1.setForeground(SystemColor.window);
		btnNewButton_1_1_1_1_1_1_1.setBackground(Color.BLUE);
		btnNewButton_1_1_1_1_1_1_1.addActionListener(new ActionListener() {//when the check in book button is pressed
			public void actionPerformed(ActionEvent e) {
				String title = txtBookTtileOr.getText();//gets the user input
				checkInBook(title);//runs the check in book method
			}
		});
		
		//visuals
		btnNewButton_1_1_1_1_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 18));
		btnNewButton_1_1_1_1_1_1_1.setBounds(490, 475, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_1_1_1_1);
		JScrollPane scrollPane = new JScrollPane();
		//scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setBounds(10, 10, 790, 311);
		//adds a scrollbar to the text output area
		frame.getContentPane().add(scrollPane);
		JTextArea txtrPutTitleOf = new JTextArea();
		scrollPane.setViewportView(txtrPutTitleOf);
		txtrPutTitleOf.setFont(new Font("Monospaced", Font.PLAIN, 22));
		txtrPutTitleOf.setText("If you want to Add:\r\n-Book: enter the title in the Input Box\r\n-Person: enter their name into the Input Box\r\n\r\nIf you want to Remove:\r\n-Put ONLY the title of the book in the Input Box\r\n-Put the name of the person in the Input Box");
		txtrPutTitleOf.setEditable(false);
		
		
		
		
		//visuals
		JButton btnNewButton_1_1 = new JButton("List Books");
		btnNewButton_1_1.setBackground(Color.CYAN);
		btnNewButton_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {//when list books button is pressed
				txtrPutTitleOf.setText(listBooks());//runs method to set the text box text. Method returns a string which is then placed into the box
			}
		});
		
		//visuals
		btnNewButton_1_1.setFont(new Font("Tahoma", Font.PLAIN, 22));
		btnNewButton_1_1.setBounds(330, 384, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1);
		JButton btnNewButton_1_1_1 = new JButton("List People");
		btnNewButton_1_1_1.setBackground(Color.MAGENTA);
		btnNewButton_1_1_1.addActionListener(new ActionListener() {//when list people button is pressed
			public void actionPerformed(ActionEvent e) {
				txtrPutTitleOf.setText(listPeople());//runs method to get a string with all the people in the database
			}
		});
		
		//visuals
		btnNewButton_1_1_1.setFont(new Font("Tahoma", Font.PLAIN, 22));
		btnNewButton_1_1_1.setBounds(490, 384, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1);
		JButton btnNewButton_1_1_1_2 = new JButton("Book Status");
		btnNewButton_1_1_1_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {//when button is pressed
				txtrPutTitleOf.setText(bookStatus());//returns the book status as a string
			}
		});
		
		//inactive button code
		btnNewButton_1_1_1_2.setBackground(SystemColor.info);
		btnNewButton_1_1_1_2.setFont(new Font("Tahoma", Font.PLAIN, 20));
		btnNewButton_1_1_1_2.setBounds(650, 473, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_2);
		JButton btnNewButton_1_1_1_2_1 = new JButton("View Book Fees");
		btnNewButton_1_1_1_2_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				txtrPutTitleOf.setText(lateFeeCalculator());
			}

			
		});
		btnNewButton_1_1_1_2_1.setBackground(SystemColor.activeCaption);
		btnNewButton_1_1_1_2_1.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnNewButton_1_1_1_2_1.setBounds(650, 384, 150, 81);
		frame.getContentPane().add(btnNewButton_1_1_1_2_1);
		
	}//end initilized method
	
	//above this is mostly auto generated visual code with pointers to the functional methods I wrote below
	
	
	
	public static void addBook(String title){//for manually adding new books
       //this method is kind of a hodge podge of the old text based book adding method and the new database one
		
    	Book tempBook = Atlas.bookMaker(null, null);//creates a new book with default values
    	String authorName = JOptionPane.showInputDialog(null, "Who is the Author of this Book?");//shows a dialog box to the user asking for an author
    	if(authorName != null) {//if they actually entered something into the box
    		tempBook.setTitle(title);//sets the book's title
    		tempBook.setAuthor(authorName);//sets the book's author
    	try {//eclipse mandated try...catch block
    		
    		Connection conn = DriverManager.getConnection(  //connects to my AWS RDS database. When this goes to github it will need to be censored because having the login credentials out in the open like this is not secure
    				"jdbc:mysql://FILLER","admin","11111111");//the endpoint,username, and password for my RDS
	
			Statement bkState = conn.createStatement();//takes the connection object to prepare a statement going into it
			String sql = "INSERT INTO LMS.Books\r\n"//creates a string of the SQL statement which will be sent to the database
					+ "(Title, Author, id, checkedIn, lateFees, whoHasMe)\r\n"
					+ "VALUES('"+tempBook.getTitle()+"', '"+tempBook.getAuthor()+",', "+tempBook.getId()+", 1, 0, '')";//puts the temporary book values into the SQL statement
			bkState.execute(sql);//runs the SQL statement
    	//System.out.println("book added"); this line allowed me to test if the book was added
    	} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}}else {//if the user left the author prompt empty
			JOptionPane.showMessageDialog(null, "You didn't enter an Author name!");
		}
    }//end addBook method
	
	
	public static void addPerson(String name){//new person
      
    	//this is pretty much the same method as the addBook one only with a few lines altered to add a person instead of a book
    	Person tempPerson = Atlas.personMaker(null);
    	tempPerson.setName(name);
    	try {
    		//connection stuff
    		Connection conn = DriverManager.getConnection(  
    				"jdbc:mysql://FILLER","admin","11111111");
		
			Statement perState = conn.createStatement();
			String sql = "INSERT INTO LMS.People\r\n"
					+ "(Name, Books, lateFeesTotal, id)\r\n"
					+ "VALUES('"+tempPerson.getName()+"',NULL,NULL,"+tempPerson.getId()+")";
			
			perState.execute(sql);
			 JOptionPane.showMessageDialog(null, "Person added successfully!");//if it was, shows a dialog box
    	
    	} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
    }//end addPerson
	
	
	public static String listBooks(){//prints out all the books in the library
		ArrayList<String> bookTitles = new ArrayList<>();//two ArrayLists for the book titles and author names to be displayed later
		ArrayList<String> authorNames = new ArrayList<>();
		String textBox = null;//the textbox which will be sent back
		
		
		try {
    		//connection stuff
    		Connection conn = DriverManager.getConnection(  
    				"jdbc:mysql://FILLER","admin","11111111");
		
			Statement perState = conn.createStatement();
			String sql = "SELECT Title FROM LMS.Books";
			
			ResultSet rs = null;
			rs = perState.executeQuery(sql);
			
			while(rs.next()) {//I'm still not sure why this is nessessary, but when trying to read the results of the SQL query I was running into some kind of pointer problem. Running this loop fixes it for some reason, I'm not sure why.
				//every time an SQL query needs to be read, this while loop is required
				String title = rs.getString("Title");
				bookTitles.add(title);//adds the titles to our arraylist one row at a time				
			}
			
			//doing the same thing as above but this time with the author names
			sql = "SELECT Author FROM LMS.Books";
			rs = perState.executeQuery(sql);
			while(rs.next()) {
				String author = rs.getString("Author");
				authorNames.add(author);
			}
			
			
    	//this is to remove unnessessary characters at the end of my textbox, the way I build the string adds the numbers and the . before the title and author, so I need to remove the last one where it doesn't find another book
    	textBox = "1. ";
    	int k = 3;
    	for(int i=0;i<bookTitles.size();i++) {
    		int j = i+2;
    		textBox = textBox+bookTitles.get(i)+" by "+authorNames.get(i)+"\n"+j+". ";
    		if(j>9)
    			k=4;
    			if(j>99)
    				k=5;
    				if(j>999)
    					k=6;
    					if(j>9999)
    						k=7;
    					//j is the number displayed to the user, k is the number of characters which are removed from the final textbox string
    		
    	}
    	
    	//this line removes the additional characters
    	textBox = textBox.substring(0, textBox.length()-k);
    	
    	
    	} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
	return textBox;
	}//end listBooks
	
	
	public static void removeBook(String title) {//method to remove book from database
	    try {//connection stuff
	        Connection conn = DriverManager.getConnection(  
	            "jdbc:mysql://FILLER", "admin", "11111111");
	        Statement stmt = conn.createStatement();
	        
	        //making the SQL statement to delete a book
	        String sql = "DELETE FROM LMS.Books WHERE Title = '" + title + "'";
	        int rowsAffected = stmt.executeUpdate(sql);
	        
	        if (rowsAffected > 0) {//checks if the database changed
	            
	            JOptionPane.showMessageDialog(null, "Book removed successfully!");//if it was, shows a dialog box
	        } else {
	           
	            JOptionPane.showMessageDialog(null, "No book with the title '" + title + "' found in the database.");//if it was not, shows a different dialog box
	        }
	        
	        stmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "There is no book matching what you put into the text box.");
	    }
	}//end remove book
	
	public static void removePerson(String name) {//the same as above method only with my Person table
	    try {
	        Connection conn = DriverManager.getConnection(  
	            "jdbc:mysql://FILLER", "admin", "11111111");
	        Statement stmt = conn.createStatement();
	        
	        // Execute a SQL delete statement to remove the person with the specified name
	        String sql = "DELETE FROM LMS.People WHERE Name = '" + name + "'";
	        int rowsAffected = stmt.executeUpdate(sql);
	        
	        if (rowsAffected > 0) {
	          
	            JOptionPane.showMessageDialog(null, "Person removed successfully!");
	        } else {
	            System.out.println("No person with the name '" + name + "' found in the database.");
	            JOptionPane.showMessageDialog(null, "No person with the name '" + name + "' found in the database.");
	        }
	        
	        stmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "There is no person called: " + e.getMessage() + " in the system.");
	    }
	}//end removePerson
	
	
	
	
	public static String listPeople() {//method to display a list of people
	    ArrayList<String> peopleNames = new ArrayList<>();//an ArrayList of the people's names
	    String textBox = null;//the textbox which will be returned

	    try {//connection stuff
	        Connection conn = DriverManager.getConnection(  
	                "jdbc:mysql://FILLER", "admin", "11111111");
	        Statement stmt = conn.createStatement();
	        String sql = "SELECT Name FROM LMS.People";
	        ResultSet rs = stmt.executeQuery(sql);

	        while (rs.next()) {//reading the names
	            String name = rs.getString("Name");
	            peopleNames.add(name);
	        }

	       
	        textBox = "1. ";
	        for (int i = 0; i < peopleNames.size(); i++) {
	            int j = i + 2;
	            textBox = textBox + peopleNames.get(i) + "\n" + j + ". ";
	        }

	        textBox = textBox.substring(0, textBox.length() - 3);

	        stmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return textBox;
	}//end removePerson method
	
	

	public static void checkOutBook(String title) {//method for checking out books. The most complicated one in the program
	    try {
	    	//although the date stuff is not being displayed to the user yet, behind the scenes the due date is still being kept track of
	    	LocalDate currentDate = LocalDate.now();//gets the current
	    	LocalDate dueDate = currentDate.plusWeeks(1);//adds a week to today's date to find the due date
	    	//connection stuff
	        Connection conn = DriverManager.getConnection(  
	            "jdbc:mysql://FILLER", "admin", "11111111");
	        Statement stmt = conn.createStatement();
	        
	        String sql = "SELECT Name FROM LMS.People";//first SQL query to obtain a list of names
	        ArrayList<String> peopleNames = new ArrayList<>();
	        ResultSet rs = stmt.executeQuery(sql);

	        while (rs.next()) {
	            String name = rs.getString("Name");
	            peopleNames.add(name);
	        }
	        String[] people = new String[peopleNames.size()];
	        people = peopleNames.toArray(people);
	        
	        JComboBox<String> comboBox = new JComboBox<>(people);//this shows a combobox to the user with a list of all the names in the database
	        //the title is provided in the textbox, and the person checking out the book is done with this combobox
	        
	        //after getting the name, we then need to obtain that person's ID from the database
	        String selectedPerson = null;
	        int selectedID = 0;
	        int result = JOptionPane.showConfirmDialog(null, comboBox, "Select a person", JOptionPane.OK_CANCEL_OPTION);
	        if (result == JOptionPane.OK_OPTION) {
	            // Get the selected person from the combo box
	            selectedPerson = (String) comboBox.getSelectedItem();
	            //System.out.println("Selected person: " + selectedPerson);
	        } else {
	            //System.out.println("Selection canceled");
	        }
	        
	        sql = "SELECT id FROM LMS.People WHERE Name = '"+selectedPerson+"'";//this query obtains the ID
	        rs = stmt.executeQuery(sql);
	        if(rs.next()) {
	        	selectedID = rs.getInt("id");
	        	
	        }
	        
	        //then we have to do it all again to get the name
	        String selectedName = null;
	        sql = "SELECT Name FROM LMS.People WHERE Name = '"+selectedPerson+"'";
	        rs = stmt.executeQuery(sql);
	        //selectedName = rs.getString("Name");
	        if(rs.next()) {
	        	selectedName = rs.getString("Name");
	        }
	        
	        //this SQL statement is the one which makes all the changes to the database
	        //changes the duedate to a week from today, sets the checked in BOOL variable to 0 AKA False, sets the WhoHasMeID attribute to the person's ID number, sets the whoHasMe attribute to the person's name
	         sql = "UPDATE LMS.Books SET checkedIn = 0, DueDate = '"+Date.valueOf(dueDate)+"', whoHasMe = '"+selectedPerson+"' WHERE Title = '" + title + "'";
	        int rowsAffected = stmt.executeUpdate(sql);
	  
	        if (rowsAffected > 0) {//if things changed
	            
	            JOptionPane.showMessageDialog(null, "Book checked out successfully!");
	        } else {//if things did not change
	          
	            JOptionPane.showMessageDialog(null, "No book with the title '" + title + "' found in the database.");
	        }
	        
	        stmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "There is no book matching what you put into the text box.");
	    }
	}//end checkoutbook
	
	
	public static void checkInBook(String title) {//thankfully checking in a book is much simpler
	    try {//connection stuff
	        Connection conn = DriverManager.getConnection(  
	            "jdbc:mysql://FILLER", "admin", "11111111");
	        Statement stmt = conn.createStatement();
	        
	        LocalDate currentDate = LocalDate.now();
	        LocalDate dueDate = currentDate.plusWeeks(1);
	        
	        //this SQL statement has way less moving parts than the one to check out a book. Setting all the values back to default where the Title = the name of the book being checked back in
	        String sql = "UPDATE LMS.Books SET checkedIn = 1, DueDate = NULL, whoHasMe = NULL WHERE Title = '" + title + "'";
	        int rowsAffected = stmt.executeUpdate(sql);
	        
	        if (rowsAffected > 0) {
	            System.out.println("Book checked in successfully!");
	            JOptionPane.showMessageDialog(null, "Book checked in successfully!");
	        } else {
	            System.out.println("No book with the title '" + title + "' found in the database.");
	            JOptionPane.showMessageDialog(null, "No book with the title '" + title + "' found in the database.");
	        }
	        
	        stmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Error occurred while checking in the book: " + e.getMessage());
	    }
	}//end checkinbook
	
	
	
	
	private String bookStatus() {//this method prints out all the books in the library, and states who has them
		//it's basically the print book method from above, only instead of displaying the author, it displays who is in possession of the book
				ArrayList<String> bookTitles = new ArrayList<>();
				ArrayList<String> personNames = new ArrayList<>();
				String textBox = null;
				
				
				
				try {
		    		
		    		Connection conn = DriverManager.getConnection(  
		    				"jdbc:mysql://FILLER","admin","11111111");
				
					Statement perState = conn.createStatement();
					String sql = "SELECT Title FROM LMS.Books";
					
					ResultSet rs = null;
					rs = perState.executeQuery(sql);
					
					while(rs.next()) {
						String title = rs.getString("Title");
						bookTitles.add(title);
						
					}
					
					sql = "SELECT whoHasMe FROM LMS.Books";
					rs = perState.executeQuery(sql);
					while(rs.next()) {
						
						String person = rs.getString("whoHasMe");
						if(person == null || person.isEmpty()) {
							personNames.add("The Library");
						}
						else {
							personNames.add(person);
						}
						
					}
					
		    	textBox = "1. ";
		    	int k = 3;
		    	for(int i=0;i<bookTitles.size();i++) {
		    		int j = i+2;
		    		textBox = textBox+bookTitles.get(i)+" is with "+personNames.get(i)+"\n"+j+". ";
		    		if(j>9)
		    			k=4;
		    			if(j>99)
		    				k=5;
		    				if(j>999)
		    					k=6;
		    					if(j>9999)
		    						k=7;
		    		
		    	}
		    	
		    	
		    	textBox = textBox.substring(0, textBox.length()-k);
		    	
		    	
		    	} catch (SQLException e) {
					
					e.printStackTrace();
				} 

			return textBox;
			}//end book status
	
	
	private String lateFeeCalculator() {//this method calculates and displays the late fees
	    StringBuilder result = new StringBuilder();//instead of using a regular string I decided to use StringBuilder to learn how it works
	    
	    try {
	        Connection conn = DriverManager.getConnection("jdbc:mysql://FILLER","admin","11111111");//the DB actually got hacked since last week so I had to rebuild it lol
	        Statement statement = conn.createStatement();
	        String sql = "SELECT Title, DueDate FROM LMS.Books";
	        ResultSet resultSet = statement.executeQuery(sql);
	        //connection stuff is all the same as every other method
	        while (resultSet.next()) {
	            String title = resultSet.getString("Title");//grabs the title
	            LocalDate dueDate = resultSet.getDate("DueDate") != null ? resultSet.getDate("DueDate").toLocalDate() : null;
	            //this is a complicated line. It makes a LocalDate variable , but only if the value isn't null
	            
	            if (dueDate == null) {//this is also extra insurance that the dueDate variable isn't null
	                continue;
	            }

	            //this finds what the date is today
	            LocalDate currentDate = LocalDate.now();
	            long daysDifference = ChronoUnit.DAYS.between(dueDate, currentDate);//finds the difference between the due date and today's date

	            //late fee is then calculated at $1.10 a day overdue
	            double lateFee = Math.max(0, daysDifference) * 1.1;

	            //this builds what goes into the text box one line at a time
	            result.append(title).append(" is overdue ").append(daysDifference).append(" days, and ").append(lateFee).append(" is owed\n");
	        }

	        //closes all the things I opened.. Probably should have been doing this in every method
	        resultSet.close();
	        statement.close();
	        conn.close();

	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return result.toString();//returns the text box to be placed in the viewable area
	}
		
}
